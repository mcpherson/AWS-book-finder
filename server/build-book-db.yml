# create-stack --stack-name s3-trigger-lambda --template-body file://s3-trigger-lambda.yml --capabilities CAPABILITY_NAMED_IAM
# ...wait a while...
# aws cloudformation list-stacks
# ...to see if it's been created...
# aws lambda invoke --invocation-type RequestResponse --function-name s3-trigger-lambda out.txt
# cat out.txt
# rm out.txt
# ...explore stack, lambda, role in the console if so inclined...
# aws cloudformation delete-stack --stack-name s3-trigger-lambda
AWSTemplateFormatVersion: 2010-09-09
Description: Offline portion of Book Finder App

Parameters:
  ApiGatewayName:
    Type: String
    Default: bookfinder-api-gateway

  LambdaFunctionNameRekog:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: rekog-lambda

  LambdaFunctionNameDBTest:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: aws-play-basic-table

  TableName:
    Type: String
    Default: bookfinder-table-1

  UploadBucketName:
    Type: String
    Default: book-finder-uploads

  ResultsBucketName:
    Type: String
    Default: book-finder-results

  ZipBucketName:
    Type: String
    Default: losalamosal-udemy-uploads-3

  ZipVersionId:
    Type: String

  ZipS3Key:
    Type: String
    Default: lambda.zip

Resources:
  # Must create a new bucket. CFN can "import" existing resources but it's a pain.
  # You must use the console or the CLI.
  # CDK seems to handle the problem of importing exting resources better.

  # ////////////////////////////////////////////////// COGNITO USER POOL 
  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      UserPoolName: cognito-book-finder-user-pool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 365
      TokenValidityUnits: 
        AccessToken: days
        IdToken: days
        RefreshToken: days
      ClientName: cognito-book-finder-client
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      UserPoolId: !Ref UserPool

  # ////////////////////////////////////////////////// API GATEWAY 
  BFAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiGatewayName
  
  # ! DEPENDENCY !
  BFAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - BFAPIUserSignupPOST
      - BFAPIUserSignupOPTIONS
      - BFAPIUserConfirmSignupPOST
      - BFAPIUserConfirmSignupOPTIONS
      - BFAPIUserLoginPOST
      - BFAPIUserLoginOPTIONS
      - BFAPIUserLogoutPOST
      - BFAPIUserLogoutOPTIONS
      - BFAPILibraryGET
      - BFAPILibraryOPTIONS
      - BFAPILibraryUploadPOST
      - BFAPILibraryUploadOPTIONS
    Properties:
      RestApiId: !Ref BFAPI

  # Enable logging of all HTTP requests
  BFAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref BFAPIDeployment
      MethodSettings:
       - HttpMethod: "*"
         LoggingLevel: INFO
         ResourcePath: /*
         DataTraceEnabled: true
      RestApiId: !Ref BFAPI
      StageName: dev

  # https://gist.github.com/villasv/4f5b62a772abe2c06525356f80299048
  BookFinderGatewayAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "BookFinderGatewayLoggingRole.Arn"

  BookFinderGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  # Cognito authorizer
  BFAPIAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.authorization
      Name: CognitoAuthorizer
      ProviderARNs:
        - Fn::GetAtt:
            - UserPool
            - Arn
      RestApiId: !Ref BFAPI
      Type: COGNITO_USER_POOLS
  # (thanks https://www.stephengream.com/http-gateway-with-cognito)

  # ================================================== /user
  BFAPIUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt BFAPI.RootResourceId
      PathPart: "user"
      RestApiId: !Ref BFAPI

  # ================================================== /user/signup
  BFAPIUserSignupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref BFAPIUserResource
      PathPart: "signup"
      RestApiId: !Ref BFAPI
  # Don't understand why HttpMethod and IntegrationHttpMethod are specified?
  # Why not just one? What happens if they differ?

  # ---------- POST (create new cognito user with user-provided email/password)
  BFAPIUserSignupPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt BFAPIUserSignupLambda.Arn
      OperationName: "user/signup"
      ResourceId: !Ref BFAPIUserSignupResource
      RestApiId: !Ref BFAPI

  # Lambda called by POST
  BFAPIUserSignupLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: book-finder-user-signup
      Role: !GetAtt BFAPIUserSignupLambdaRole.Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          COGNITO_APP_CLIENT_ID: !Ref UserPoolClient
      Handler: signup.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      MemorySize: 128
      Timeout: 30

  # Allow API Gateway to invoke this Lambda
  BFAPILambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BFAPIUserSignupLambda.Arn
      Principal: apigateway.amazonaws.com
      # Specification of ARN allows only that endpoint to execute lambda? Check this out.
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      #SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${BFAPI}/${BFAPIStage}/${BFAPIUserSignupPOST}/

  # IAM Role for this Lambda
  BFAPIUserSignupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      # So lambda can write logs
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # Log Group for this Lambda
  BFAPIUserSignupLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [/, ["/aws/lambda", !Ref BFAPIUserSignupLambda]]
      RetentionInDays: 3
  # (Thanks https://ldoughty.com/2020/01/aws-http-api-gateway-cloudformation-setup/)

  # ---------- OPTIONS (CORS)
  BFAPIUserSignupOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref BFAPIUserSignupResource
      RestApiId: !Ref BFAPI
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # ================================================== /user/confirm-signup
  BFAPIUserConfirmSignupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref BFAPIUserResource
      PathPart: "confirm-signup"
      RestApiId: !Ref BFAPI

  # ---------- POST (email verification - user provides confirmation code (received via email) to cognito)
  BFAPIUserConfirmSignupPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt BFAPIUserConfirmSignupLambda.Arn
      OperationName: "user/confirm-signup"
      ResourceId: !Ref BFAPIUserConfirmSignupResource
      RestApiId: !Ref BFAPI

  # Lambda called by POST
  BFAPIUserConfirmSignupLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: book-finder-confirm-user-signup
      Role: !GetAtt BFAPIUserConfirmSignupLambdaRole.Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          COGNITO_APP_CLIENT_ID: !Ref UserPoolClient
      Handler: confirm-signup.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      MemorySize: 128
      Timeout: 30

  # Allow API Gateway to invoke this Lambda
  BFAPIUserConfirmSignupLambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BFAPIUserConfirmSignupLambda.Arn
      Principal: apigateway.amazonaws.com

  # IAM Role for this Lambda
  BFAPIUserConfirmSignupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      # So lambda can write logs
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # Log Group for this Lambda
  BFAPIUserConfirmSignupLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [/, ["/aws/lambda", !Ref BFAPIUserConfirmSignupLambda]]
      RetentionInDays: 3

  # ---------- OPTIONS (CORS)
  BFAPIUserConfirmSignupOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref BFAPIUserConfirmSignupResource
      RestApiId: !Ref BFAPI
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # --------------------------------------------------- /user/login
  BFAPIUserLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref BFAPIUserResource
      PathPart: "login"
      RestApiId: !Ref BFAPI

  # ---------- POST (allows user to "log in" to cognito by providing username/password - cognito returns tokens)
  BFAPIUserLoginPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt BFAPIUserLoginLambda.Arn
      OperationName: "user/login"
      ResourceId: !Ref BFAPIUserLoginResource
      RestApiId: !Ref BFAPI

  # Lambda called by POST
  BFAPIUserLoginLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: book-finder-login
      Role: !GetAtt BFAPIUserLoginLambdaRole.Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          COGNITO_APP_CLIENT_ID: !Ref UserPoolClient
      Handler: login.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      MemorySize: 128
      Timeout: 30

  # Allow API Gateway to invoke this Lambda
  BFAPIUserLoginLambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BFAPIUserLoginLambda.Arn
      Principal: apigateway.amazonaws.com
     
  # IAM Role for this Lambda
  BFAPIUserLoginLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      # So lambda can write logs
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # Log Group for this Lambda
  BFAPIUserLoginLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [/, ["/aws/lambda", !Ref BFAPIUserLoginLambda]]
      RetentionInDays: 3

  # ---------- OPTIONS (CORS)
  BFAPIUserLoginOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref BFAPIUserLoginResource
      RestApiId: !Ref BFAPI
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # --------------------------------------------------- /user/logout
  BFAPIUserLogoutResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref BFAPIUserResource
      PathPart: "logout"
      RestApiId: !Ref BFAPI

  # ---------- POST ("logs out" authenticated user from cognito user pool (i.e. revokes their tokens))
  BFAPIUserLogoutPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref BFAPIAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt BFAPIUserLogoutLambda.Arn
      OperationName: "user/logout"
      ResourceId: !Ref BFAPIUserLogoutResource
      RestApiId: !Ref BFAPI

  # Lambda called by POST
  BFAPIUserLogoutLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: book-finder-logout
      Role: !GetAtt BFAPIUserLogoutLambdaRole.Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          COGNITO_APP_CLIENT_ID: !Ref UserPoolClient
      Handler: logout.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      MemorySize: 128
      Timeout: 30

  # Allow API Gateway to invoke this Lambda
  BFAPIUserLogoutLambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BFAPIUserLogoutLambda.Arn
      Principal: apigateway.amazonaws.com

  # IAM Role for this Lambda
  BFAPIUserLogoutLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      # So lambda can write logs
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # Log Group for this Lambda
  BFAPIUserLogoutLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [/, ["/aws/lambda", !Ref BFAPIUserLogoutLambda]]
      RetentionInDays: 3

  # ---------- OPTIONS (CORS)
  BFAPIUserLogoutOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref BFAPIUserLogoutResource
      RestApiId: !Ref BFAPI
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # --------------------------------------------------- /user/forgot-password

  # --------------------------------------------------- /user/refresh

  # --------------------------------------------------- /user/delete

  # --------------------------------------------------- /library
  BFAPILibraryResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !GetAtt BFAPI.RootResourceId
        PathPart: "library"
        RestApiId: !Ref BFAPI

  # ---------- GET (retrieves an authenticated user's uploaded images from S3 for display on the Library page)
  BFAPILibraryGET:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref BFAPIAuthorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        RequestParameters:
          integration.request.path.usersub : method.request.path.usersub
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt BFAPILibraryLambda.Arn
      OperationName: "library"
      RequestParameters:
        method.request.path.usersub : true
      ResourceId: !Ref BFAPILibraryResource
      RestApiId: !Ref BFAPI

  # Lambda called by GET
  BFAPILibraryLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: book-finder-library
      Role: !GetAtt BFAPILibraryLambdaRole.Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          COGNITO_APP_CLIENT_ID: !Ref UserPoolClient
      Handler: library.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      MemorySize: 128
      Timeout: 30

  # Allow API Gateway to invoke this Lambda
  BFAPILibraryLambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BFAPILibraryLambda.Arn
      Principal: apigateway.amazonaws.com

  # IAM Role for this Lambda
  BFAPILibraryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"

  # Log Group for this Lambda
  BFAPILibraryLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [/, ["/aws/lambda", !Ref BFAPILibraryLambda]]
      RetentionInDays: 3

  # ---------- OPTIONS (CORS)
  BFAPILibraryOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref BFAPILibraryResource
      RestApiId: !Ref BFAPI
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # --------------------------------------------------- /library/upload
  BFAPILibraryUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref BFAPILibraryResource
      PathPart: "upload"
      RestApiId: !Ref BFAPI

  # ---------- POST (generates a presigned S3 URL that allows an authenticated user to upload a single image to the S3 bucket)
  BFAPILibraryUploadPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref BFAPIAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt BFAPILibraryUploadLambda.Arn
      OperationName: "library/upload"
      ResourceId: !Ref BFAPILibraryUploadResource
      RestApiId: !Ref BFAPI

  # Lambda called by POST
  BFAPILibraryUploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: book-finder-library-upload
      Role: !GetAtt BFAPILibraryUploadLambdaRole.Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          COGNITO_APP_CLIENT_ID: !Ref UserPoolClient
      Handler: library-upload.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      MemorySize: 128
      Timeout: 30

  # Allow API Gateway to invoke this Lambda
  BFAPILibraryUploadLambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BFAPILibraryUploadLambda.Arn
      Principal: apigateway.amazonaws.com

  # IAM Role for this Lambda
  BFAPILibraryUploadLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  # Log Group for this Lambda
  BFAPILibraryUploadLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [/, ["/aws/lambda", !Ref BFAPILibraryUploadLambda]]
      RetentionInDays: 3

  # ---------- OPTIONS (CORS)
  BFAPILibraryUploadOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref BFAPILibraryUploadResource
      RestApiId: !Ref BFAPI
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # --------------------------------------------------- /library/search

  

# ---------------------------------------------------- DYNAMODB
  BFTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
        - AttributeName: "Image"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
        - AttributeName: "Image"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  S3ImageBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - S3TriggerLambdaPermission
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref UploadBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt S3TriggerLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: originals/
                  - Name: suffix
                    Value: .png

  S3ResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Ref ResultsBucketName

  S3TriggerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref S3TriggerLambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:s3:::${UploadBucketName}"
      SourceAccount: !Ref AWS::AccountId

  S3TriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      # So lambda can write logs
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: getAndDeleteObjects
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "arn:${AWS::Partition}:s3:::${UploadBucketName}/*"
        - PolicyName: detectTextRek
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: rekognition:DetectText
                Resource: "*"

  # REKOG LAMBDA
  S3TriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionNameRekog
      Role: !GetAtt S3TriggerLambdaRole.Arn
      Runtime: nodejs16.x
      Handler: rekog.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      # https://github.com/charoitel/lambda-layer-canvas-nodejs/wiki
      # https://docs.aws.amazon.com/serverlessrepo/latest/devguide/sharing-lambda-layers.html
      Layers:
        - arn:aws:lambda:us-east-1:795959022439:layer:canvas-nodejs:1
      MemorySize: 1024
      Timeout: 300

  S3TriggerLimitRetries:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref S3TriggerLambda
      MaximumRetryAttempts: 0
      Qualifier: "$LATEST"

  # Thanks https://ldoughty.com/2020/01/aws-http-api-gateway-cloudformation-setup/
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [/, ["/aws/lambda", !Ref S3TriggerLambda]]
      RetentionInDays: 3

  # BEGIN DB LAMBDA TEST RESOURCES
  BasicTableLambdaRoleDBTest:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      # So lambda can write logs
      Policies:
        - PolicyName: genericDynamoDBPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt BFTable.Arn
  # The following Resource specification didn't work even though it looks valid
  # in the error logs. A wildcard Resource ("*") worked OK. Had to use the !GetAttr
  # version above to get this policy to work???
  #                - !Sub "arn:${AWS::Partition}:dynamodb:::table/${TableName}"
      ManagedPolicyArns:
        # - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      # Policies:
      #   - PolicyName: DBPermissions
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - dynamodb:DescribeTable
      #           Resource: !Sub "arn:${AWS::Partition}:dynamodb:::table/${TableName}"

  BasicTableLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionNameDBTest
      Role: !GetAtt BasicTableLambdaRoleDBTest.Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          DB_TABLE_NAME: !Ref TableName
      Handler: db-test.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      MemorySize: 128
      Timeout: 30
  # END DB LAMBDA TEST RESOURCES

Outputs:
  UserPoolId:
    Value: !Ref UserPool

  UserPoolClientId:
    Value: !Ref UserPoolClient