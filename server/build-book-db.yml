# create-stack --stack-name s3-trigger-lambda --template-body file://s3-trigger-lambda.yml --capabilities CAPABILITY_NAMED_IAM
# ...wait a while...
# aws cloudformation list-stacks
# ...to see if it's been created...
# aws lambda invoke --invocation-type RequestResponse --function-name s3-trigger-lambda out.txt
# cat out.txt
# rm out.txt
# ...explore stack, lambda, role in the console if so inclined...
# aws cloudformation delete-stack --stack-name s3-trigger-lambda
AWSTemplateFormatVersion: 2010-09-09
Description: Offline portion of Book Finder App

Parameters:
  ApiGatewayName:
    Type: String
    Default: bookfinder-api-gateway
  LambdaFunctionNameRekog:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: rekog-lambda

  LambdaFunctionNameDBTest:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: aws-play-basic-table

  TableName:
    Type: String
    Default: bookfinder-table-1

  ImageBucketName:
    Type: String
    Default: losalamosal-udemy-images-2

  ZipBucketName:
    Type: String
    Default: losalamosal-udemy-uploads-3

  ZipVersionId:
    Type: String

  ZipS3Key:
    Type: String
    Default: lambda.zip

Resources:
  # Must create a new bucket. CFN can "import" existing resources but it's a pain.
  # You must use the console or the CLI.
  
  # CDK seems to handle the problem of importing exting resources better.
  # --------------------------------------------------- API GATEWAY
  BookFinderGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiGatewayName

  BookFinderUsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt BookFinderGateway.RootResourceId
      PathPart: "users"
      RestApiId: !Ref BookFinderGateway

  BookFinderUsersSignupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref BookFinderUsersResource
      PathPart: "signup"
      RestApiId: !Ref BookFinderGateway

  # Don't understand why HttpMethod and IntegrationHttpMethod are specified?
  # Why not just one? What happens if they differ?
  BookFinderUsersSignupPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt BookFinderUsersSignupLambda.Arn
      OperationName: "users/signup"
      ResourceId: !Ref BookFinderUsersSignupResource
      RestApiId: !Ref BookFinderGateway

  BookFinderUsersSignupOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref BookFinderUsersSignupResource
      RestApiId: !Ref BookFinderGateway
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  BookFinderDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - BookFinderUsersSignupPOST
    Properties:
      RestApiId: !Ref BookFinderGateway

  # Enable logging of all HTTP requests
  BookFinderStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref BookFinderDeployment
      #MethodSettings:
      #  - HttpMethod: "*"
      #    LoggingLevel: INFO
      #    ResourcePath: /*
      #    DataTraceEnabled: true
      RestApiId: !Ref BookFinderGateway
      StageName: dev

  BookFinderUsersSignupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      # So lambda can write logs
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  BookFinderUsersSignupLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: book-finder-users-signup
      Role: !GetAtt BookFinderUsersSignupLambdaRole.Arn
      Runtime: nodejs16.x
      Handler: apigw.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      MemorySize: 128
      Timeout: 30

  # Thanks https://ldoughty.com/2020/01/aws-http-api-gateway-cloudformation-setup/
  BookFinderUserSignupLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [/, ["/aws/lambda", !Ref BookFinderUsersSignupLambda]]
      RetentionInDays: 3

  BookFinderGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BookFinderUsersSignupLambda.Arn
      Principal: apigateway.amazonaws.com
      # Specification of ARN allows only that endpoint to execute lambda? Check this out.
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      #SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${BookFinderGateway}/${BookFinderStage}/${BookFinderUsersSignupPOST}/

# ---------------------------------------------------- DYNAMODB
  BookFinderTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
        - AttributeName: "Image"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
        - AttributeName: "Image"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  S3ImageBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - S3TriggerLambdaPermission
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref ImageBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt S3TriggerLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: originals/
                  - Name: suffix
                    Value: .png

  S3TriggerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref S3TriggerLambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:s3:::${ImageBucketName}"
      SourceAccount: !Ref AWS::AccountId

  S3TriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      # So lambda can write logs
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: getAndDeleteObjects
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "arn:${AWS::Partition}:s3:::${ImageBucketName}/*"
        - PolicyName: detectTextRek
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: rekognition:DetectText
                Resource: "*"

  # REKOG LAMBDA
  S3TriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionNameRekog
      Role: !GetAtt S3TriggerLambdaRole.Arn
      Runtime: nodejs16.x
      Handler: rekog.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      # https://github.com/charoitel/lambda-layer-canvas-nodejs/wiki
      # https://docs.aws.amazon.com/serverlessrepo/latest/devguide/sharing-lambda-layers.html
      Layers:
        - arn:aws:lambda:us-east-1:795959022439:layer:canvas-nodejs:1
      MemorySize: 1024
      Timeout: 300

  S3TriggerLimitRetries:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref S3TriggerLambda
      MaximumRetryAttempts: 0
      Qualifier: "$LATEST"

  # Thanks https://ldoughty.com/2020/01/aws-http-api-gateway-cloudformation-setup/
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [/, ["/aws/lambda", !Ref S3TriggerLambda]]
      RetentionInDays: 3

  # BEGIN DB LAMBDA TEST RESOURCES
  BasicTableLambdaRoleDBTest:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      # So lambda can write logs
      Policies:
        - PolicyName: genericDynamoDBPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt BookFinderTable.Arn
  # The following Resource specification didn't work even though it looks valid
  # in the error logs. A wildcard Resource ("*") worked OK. Had to use the !GetAttr
  # version above to get this policy to work???
  #                - !Sub "arn:${AWS::Partition}:dynamodb:::table/${TableName}"
      ManagedPolicyArns:
        # - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      # Policies:
      #   - PolicyName: DBPermissions
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - dynamodb:DescribeTable
      #           Resource: !Sub "arn:${AWS::Partition}:dynamodb:::table/${TableName}"

  BasicTableLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionNameDBTest
      Role: !GetAtt BasicTableLambdaRoleDBTest.Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          DB_TABLE_NAME: !Ref TableName
      Handler: db-test.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      MemorySize: 128
      Timeout: 30
  # END DB LAMBDA TEST RESOURCES